# shellcheck disable=all

setopt localoptions extendedglob globdots nullglob NO_caseglob NO_autonamedirs

local _server="${RCODE_REMOTE:-$(hostname -s)}" _local="$LC_HOSTNAME"
local OPTIND=1 c_flag i_flag g_flag f_flag z_flag cd_target

local -a code_flags ssh_files

function __resolve_dir_maybe_zoxide() {
	local dir

	if [[ -d $1 ]]; then
		print -rn -- "$1"
		return 0
	fi

	if [[ ! -e $1 ]] && command -v zoxide &>/dev/null; then
		if ! dir="$(zoxide query -i "$1")"; then
			return 1
		fi

		print -rn -- "$dir"
		return 0
	fi

	print -rn -- "$1"
	return 0
}

function __rcode_process_target() {
	[[ -d $1 ]] || return 0

	(
		cd "$1" || {
			echo >&2 "Failed to change directory to $1"
			exit 1
		}

		isgit="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
		if [[ $isgit != true ]]; then
			isgit="$(git rev-parse --is-inside-git-dir 2>/dev/null)"
		fi

		if [[ $g_flag = true && $isgit != true ]]; then
			git init
		elif [[ $f_flag = true && $isgit = true ]]; then
			git fetch
		fi

		if [[ $i_flag != true ]]; then
			return 0
		fi

		workspaces=(*.code-workspace)
		if [[ ${#workspaces} -eq 0 ]]; then
			cat >"$(basename "$(pwd)").code-workspace" <<EOM
{
    "folders": [
        {
            "path": ".",
        },
    ],
    "settings": {
        "files.watcherExclude": {
            "**/.git/objects/**": true,
            "**/.git/subtree-cache/**": true,
            "**/.hg/store/**": true,
            "**/node_modules/*/**": true,
            "**/.cache/**": true,
            "**/build/**": true,
            "**/site-packages/**": true,
        },
    },
}
EOM
		fi
	)
}

function __rcode_dispatch() {
	local file_dir=file target parent workspace cnt
	target="$(realpath -m "$1")"

	if [[ -d $target ]]; then
		parent="$target"

		while true; do
			workspace=("$parent/"*.code-workspace)
			if [[ ${#workspace} -eq 1 ]]; then
				target="$workspace[1]"
				break
			elif [[ ${#workspace} -gt 1 || $parent = / ]]; then
				file_dir='folder'
				break
			fi

			parent="$(dirname "$parent")"
		done
	fi

	ssh_files+=(
		"--${file_dir}-uri"
		"vscode-remote://ssh-remote+${_server}${target}"
	)
}

function __rcode_run_ssh() {
	local _target _orig_target
	local -a _argv=("$@") _ssh_opts=(-T)

	if [[ $# -eq 1 && $1 = - ]]; then
		ssh_files=(-)
	else
		_ssh_opts+=(-n)

		if [[ $# -eq 0 ]]; then
			_argv+=("$(pwd)")
		fi

		for _target in "${_argv[@]}"; do
			_orig_target="$_target"

			if [[ $z_flag = true ]] &&
				! _target="$(__resolve_dir_maybe_zoxide "$_target")"; then
				echo >&2 "Failed to resolve $_orig_target with zoxide"
				return 1
			fi

			if [[ -z $cd_target && -n $c_flag && -d $_target ]]; then
				cd_target="$_target"
			fi

			__rcode_process_target "$_target" || return 1
			__rcode_dispatch "$_target"
		done
	fi

	ssh "${_ssh_opts[@]}" "$_local" \
		code "${(q)code_flags[@]}" "${(q)ssh_files[@]}"
}

while getopts 'nrwcigfz' flag &>/dev/null; do
	case "$flag" in
	n) code_flags+=(--new-window) ;;
	r) code_flags+=(--reuse-window) ;;
	w) code_flags+=(--wait) ;;
	c) c_flag=true ;;
	i) i_flag=true ;;
	g) g_flag=true ;;
	f) f_flag=true ;;
	z) z_flag=true ;;
	*) break ;;
	esac
done

shift $((OPTIND - 1))
if [[ $1 = -- ]]; then
	shift
fi

__rcode_run_ssh "$@" || return 1
if [[ -n $cd_target ]]; then
	pushd "$cd_target"
fi
