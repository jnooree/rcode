# shellcheck disable=all

setopt localoptions extendedglob globdots nullglob NO_caseglob NO_autonamedirs

local rhost="${RCODE_REMOTE:-$(hostname -s)}" lhost="$LC_HOSTNAME"
local OPTIND=1 c_flag i_flag g_flag f_flag z_flag cd_target

local -a ssh_opts=(-T) code_flags ssh_files

function __rcode_resolve_zoxide() {
	local _dir

	if [[ $# -eq 1 && -d $1 ]]; then
		print -rn -- "$1"
		return 0
	fi

	if ! _dir="$(zoxide query -i "$@")"; then
		return 1
	fi

	print -rn -- "$_dir"
	return 0
}

function __rcode_process_target() {
	[[ -d $1 ]] || return 0

	(
		cd "$1" || {
			echo >&2 "Failed to change directory to $1"
			exit 1
		}

		isgit="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
		if [[ $isgit != true ]]; then
			isgit="$(git rev-parse --is-inside-git-dir 2>/dev/null)"
		fi

		if [[ $g_flag = true && $isgit != true ]]; then
			git init
		elif [[ $f_flag = true && $isgit = true ]]; then
			git fetch
		fi

		if [[ $i_flag != true ]]; then
			return 0
		fi

		workspaces=(*.code-workspace)
		if [[ ${#workspaces} -eq 0 ]]; then
			cat >"$(basename "$(pwd)").code-workspace" <<EOM
{
    "folders": [
        {
            "path": ".",
        },
    ],
    "settings": {
        "files.watcherExclude": {
            "**/.git/objects/**": true,
            "**/.git/subtree-cache/**": true,
            "**/.hg/store/**": true,
            "**/node_modules/*/**": true,
            "**/.cache/**": true,
            "**/build/**": true,
            "**/site-packages/**": true,
        },
    },
}
EOM
		fi
	)
}

function __rcode_dispatch() {
	local _file_dir=file _target _parent _workspace
	_target="$(realpath -m "$1")"

	if [[ -d $_target ]]; then
		_parent="$_target"

		while true; do
			_workspace=("$_parent/"*.code-workspace)
			if [[ ${#_workspace} -eq 1 ]]; then
				_target="$_workspace[1]"
				break
			elif [[ ${#_workspace} -gt 1 || $_parent = / ]]; then
				_file_dir='folder'
				break
			fi

			_parent="$(dirname "$_parent")"
		done
	fi

	ssh_files+=(
		"--${_file_dir}-uri"
		"vscode-remote://ssh-remote+${rhost}${_target}"
	)
}

function __rcode_build_args() {
	if [[ $# -eq 1 && $1 = - ]]; then
		ssh_files=(-)
		return 0
	fi

	local _target _orig_target
	local -a _argv=("$@")

	ssh_opts+=(-n)

	if [[ $z_flag = true ]]; then
		if ! _target="$(__rcode_resolve_zoxide "${_argv[@]}")"; then
			echo >&2 "Failed to resolve $_orig_target with zoxide"
			return 1
		fi

		if [[ -n $c_flag ]]; then
			cd_target="$_target"
		fi

		__rcode_process_target "$_target" || return 1
		__rcode_dispatch "$_target"
		return 0
	fi

	if [[ $# -eq 0 ]]; then
		_argv+=("$(pwd)")
	fi

	for _target in "${_argv[@]}"; do
		if [[ -z $cd_target && -n $c_flag && -d $_target ]]; then
			cd_target="$_target"
		fi

		__rcode_process_target "$_target" || return 1
		__rcode_dispatch "$_target"
	done
}

while getopts 'nrwcigfz' flag &>/dev/null; do
	case "$flag" in
	n) code_flags+=(--new-window) ;;
	r) code_flags+=(--reuse-window) ;;
	w) code_flags+=(--wait) ;;
	c) c_flag=true ;;
	i) i_flag=true ;;
	g) g_flag=true ;;
	f) f_flag=true ;;
	z) z_flag=true ;;
	*) break ;;
	esac
done

shift $((OPTIND - 1))
if [[ $1 = -- ]]; then
	shift
fi

if [[ $z_flag = true ]] && ! command -v zoxide &>/dev/null; then
	echo >&2 "zoxide is not installed, cannot use -z flag"
	return 1
fi

__rcode_build_args "$@" || return 1
ssh "${ssh_opts[@]}" "$lhost" code "${(q)code_flags[@]}" "${(q)ssh_files[@]}" ||
	return 1

if [[ -n $cd_target ]]; then
	pushd "$cd_target"
fi
